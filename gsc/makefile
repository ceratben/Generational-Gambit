# makefile for Gambit-C compiler.

# Copyright (c) 1994-2012 by Marc Feeley, All Rights Reserved.

herefromroot = gsc
rootfromhere = ..
SUBDIRS =

PACKAGE_SHORTNAME = gambc
PACKAGE_NAME = Gambit-C
PACKAGE_VERSION = v4.6.6
PACKAGE_STRING = Gambit-C v4.6.6
PACKAGE_BUGREPORT = gambit@iro.umontreal.ca
PACKAGE_TARNAME = gambc-v4_6_6



srcdir = .

srcdirpfx = 

C_COMPILER = gcc
C_PREPROC = gcc -E
FLAGS_OBJ =    -no-cpp-precomp -Wno-unused -Wno-write-strings -O1 -fno-math-errno -fschedule-insns2 -fno-trapping-math -fno-strict-aliasing -fwrapv -fomit-frame-pointer -fPIC -fno-common -mieee-fp 
FLAGS_DYN =    -bundle  -no-cpp-precomp -Wno-unused -Wno-write-strings -O1 -fno-math-errno -fschedule-insns2 -fno-trapping-math -fno-strict-aliasing -fwrapv -fomit-frame-pointer -fPIC -fno-common -mieee-fp   -flat_namespace -undefined suppress
FLAGS_LIB =    -dynamiclib -install_name $(libdir)/$(LIBRARY)   -flat_namespace -undefined suppress
FLAGS_EXE =     -no-cpp-precomp -Wno-unused -Wno-write-strings -O1 -fno-math-errno -fschedule-insns2 -fno-trapping-math -fno-strict-aliasing -fwrapv -fomit-frame-pointer -fPIC -fno-common -mieee-fp  
DEFS = -DHAVE_CONFIG_H
LIBS = 

GAMBCLIB_DEFS =  -D___GAMBCDIR="\"/usr/local/Gambit-C\"" -D___SYS_TYPE_CPU="\"i386\"" -D___SYS_TYPE_VENDOR="\"apple\"" -D___SYS_TYPE_OS="\"darwin9.8.0\"" -D___CONFIGURE_COMMAND="\"./configure"\" -D___OBJ_EXTENSION="\".o\"" -D___EXE_EXTENSION="\"\"" -D___BAT_EXTENSION="\"\""
LIB_PREFIX = lib
LIB_EXTENSION = .a
GAMBCLIB = gambc
GAMBCGSCLIB = gambcgsc
GAMBCGSILIB = gambcgsi
INSTALL = $(rootfromhere)/install-sh -c
INSTALL_DATA = $(rootfromhere)/install-sh -c -m 644
INSTALL_LIB = $(rootfromhere)/install-sh -c -m 644
INSTALL_PROGRAM = $(rootfromhere)/install-sh -c -m 755
LN_S = ln -s
RANLIB = ranlib
RC = git
GIT = git
HG = hg

prefix = /usr/local/Gambit-C
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${prefix}/lib
bindir = ${prefix}/bin
docdir = ${prefix}/doc
infodir = ${prefix}/info
emacsdir = ${datadir}/emacs/site-lisp
libexecdir = ${exec_prefix}/libexec
datarootdir = ${prefix}/share
datadir = ${prefix}/share
htmldir = ${docdir}
dvidir = ${docdir}
pdfdir = ${docdir}
psdir = ${docdir}
localedir = ${datarootdir}/locale
mandir = ${datarootdir}/man

.SUFFIXES:
.SUFFIXES: .scm .c .o

HEADERS_SCM = "_assert\#.scm" "_asm\#.scm" "_x86\#.scm" "_codegen\#.scm" 

LIBRARIES_SCM = $(HEADERS_SCM)

LIBRARY = $(LIB_PREFIX)$(GAMBCGSCLIB)$(LIB_EXTENSION)
LIBRARY_NORMAL_C =
LIBRARY_NORMAL_CPP =
LIBRARY_NORMAL_H =
LIBRARY_NORMAL_O =
LIBRARY_NORMAL_O_PLUS =
LIBRARY_NORMAL_O_COMMA =
LIBRARY_NORMAL_SOURCES = $(LIBRARY_NORMAL_C) $(LIBRARY_NORMAL_CPP) \
$(LIBRARY_NORMAL_H)
LIBRARY_MODULES = _host _utils _source _parms \
_env _ptree1 _ptree2 _gvm _back _front \
_prims _assert _asm _x86 _codegen \
_t-univ _t-c-1 _t-c-2 _t-c-3 \
_gsclib
LIBRARY_MODULES_SCM = _host.scm _utils.scm _source.scm _parms.scm \
_env.scm _ptree1.scm _ptree2.scm _gvm.scm _back.scm _front.scm \
_prims.scm _assert.scm _asm.scm _x86.scm _codegen.scm \
_t-univ.scm _t-c-1.scm _t-c-2.scm _t-c-3.scm \
_gsclib.scm
LIBRARY_MODULES_C = _host.c _utils.c _source.c _parms.c \
_env.c _ptree1.c _ptree2.c _gvm.c _back.c _front.c \
_prims.c _assert.c _asm.c _x86.c _codegen.c \
_t-univ.c _t-c-1.c _t-c-2.c _t-c-3.c \
_gsclib.c
LIBRARY_MODULES_O = _host.o _utils.o _source.o _parms.o \
_env.o _ptree1.o _ptree2.o _gvm.o _back.o _front.o \
_prims.o _assert.o _asm.o _x86.o _codegen.o \
_t-univ.o _t-c-1.o _t-c-2.o _t-c-3.o \
_gsclib.o
LIBRARY_MODULES_O_PLUS = +_host.o +_utils.o +_source.o +_parms.o \
+_env.o +_ptree1.o +_ptree2.o +_gvm.o +_back.o +_front.o \
+_prims.o +_assert.o +_asm.o +_x86.o +_codegen.o \
+_t-univ.o +_t-c-1.o +_t-c-2.o +_t-c-3.o \
+_gsclib.o
LIBRARY_MODULES_O_COMMA = _host.o,_utils.o,_source.o,_parms.o,\
_env.o,_ptree1.o,_ptree2.o,_gvm.o,_back.o,_front.o,\
_prims.o,_assert.o,_asm.o,_x86.o,_codegen.o,\
_t-univ.o,_t-c-1.o,_t-c-2.o,_t-c-3.o,\
_gsclib.o
LIBRARY_MODULES_O_IN_COMPILE_ORDER = _t-c-2.o _ptree1.o _ptree2.o \
_front.o _t-univ.o _t-c-1.o _gvm.o _source.o _t-c-3.o \
_x86.o _asm.o _utils.o _parms.o _host.o _env.o _prims.o \
_back.o _codegen.o _assert.o _gsclib.o
LIBRARY_OBJECTS = $(LIBRARY_NORMAL_O) \
$(LIBRARY_MODULES_O) _$(GAMBCGSCLIB).o
LIBRARY_OBJECTS_PLUS = $(LIBRARY_NORMAL_O_PLUS) \
$(LIBRARY_MODULES_O_PLUS) +_$(GAMBCGSCLIB).o
LIBRARY_OBJECTS_COMMA = $(LIBRARY_NORMAL_O_COMMA),\
$(LIBRARY_MODULES_O_COMMA),_$(GAMBCGSCLIB).o
LIBRARY_OBJECTS_IN_COMPILE_ORDER = $(LIBRARY_MODULES_O_IN_COMPILE_ORDER) \
$(LIBRARY_NORMAL_O_IN_COMPILE_ORDER) _$(GAMBCGSCLIB).o

LIBRARIES = $(LIBRARY)

MAKE_LIBRARY_LIBS = $(rootfromhere)/lib/$(LIB_PREFIX)$(GAMBCLIB)$(LIB_EXTENSION)
MAKE_LIBRARY_FOR_INSTALL_LIBS = -L$(rootfromhere)/lib -l$(GAMBCLIB)

EXECUTABLE = gsc
EXECUTABLE_INSTALLED = gsc
EXECUTABLE_NORMAL_C =
EXECUTABLE_NORMAL_CPP =
EXECUTABLE_NORMAL_H =
EXECUTABLE_NORMAL_O =
EXECUTABLE_NORMAL_O_PLUS =
EXECUTABLE_NORMAL_O_COMMA =
EXECUTABLE_NORMAL_SOURCES = $(EXECUTABLE_NORMAL_C) $(EXECUTABLE_NORMAL_CPP) \
$(EXECUTABLE_NORMAL_H)
EXECUTABLE_MODULES = _gsc
EXECUTABLE_MODULES_SCM = _gsc.scm
EXECUTABLE_MODULES_C = _gsc.c
EXECUTABLE_MODULES_O = _gsc.o
EXECUTABLE_MODULES_O_PLUS = +_gsc.o
EXECUTABLE_MODULES_O_COMMA = _gsc.o
EXECUTABLE_MODULES_O_IN_COMPILE_ORDER = _gsc.o
EXECUTABLE_OBJECTS = $(EXECUTABLE_NORMAL_O) \
$(EXECUTABLE_MODULES_O) _gsc_.o
EXECUTABLE_OBJECTS_PLUS = $(EXECUTABLE_NORMAL_O_PLUS) \
$(EXECUTABLE_MODULES_O_PLUS) +_gsc_.o
EXECUTABLE_OBJECTS_COMMA = $(EXECUTABLE_NORMAL_O_COMMA),\
$(EXECUTABLE_MODULES_O_COMMA),_gsc_.o
EXECUTABLE_OBJECTS_IN_COMPILE_ORDER = $(EXECUTABLE_MODULES_O_IN_COMPILE_ORDER) \
$(EXECUTABLE_NORMAL_O_IN_COMPILE_ORDER) _gsc_.o

LINK_LIBS = $(LIBRARY) $(rootfromhere)/lib/$(LIB_PREFIX)$(GAMBCLIB)$(LIB_EXTENSION)
LINK_FOR_INSTALL_LIBS = -L. -L$(rootfromhere)/lib -l$(GAMBCGSCLIB) -l$(GAMBCLIB)

MODULES_SCM = $(LIBRARY_MODULES_SCM) $(EXECUTABLE_MODULES_SCM)
MODULES_C = $(LIBRARY_MODULES_C) $(EXECUTABLE_MODULES_C)
OBJECTS = $(LIBRARY_OBJECTS) $(EXECUTABLE_OBJECTS)

RCFILES = makefile.in fixnum.scm generic.scm igsc.scm $(MODULES_SCM) \
$(LIBRARIES_SCM) _envadt.scm _gvmadt.scm _ptreeadt.scm _sourceadt.scm \
runtests.scm

GENDISTFILES = $(MODULES_C) _$(GAMBCGSCLIB).c _gsc_.c

DISTFILES = $(RCFILES) $(GENDISTFILES)

INSTFILES_LIB_DATA = _$(GAMBCGSCLIB).c $(LIBRARIES_SCM)

GAMBCDIR_INCLUDE = $(srcdirpfx)$(rootfromhere)/include
GAMBCDIR_LIB = $(srcdirpfx)$(rootfromhere)/lib
GAMBCDIR_LIB_GSI = $(srcdirpfx)$(rootfromhere)/gsi
GAMBCDIR_LIB_GSC = $(srcdirpfx)$(rootfromhere)/gsc

BUILD_OBJ_OUTPUT_FILENAME = $*.o
BUILD_OBJ_CC_OPTIONS =  -I$(srcdir) $(DEFS)
BUILD_OBJ_INPUT_FILENAMES = $(srcdirpfx)$*.c

BUILD_EXE_OUTPUT_FILENAME = $(EXECUTABLE)
BUILD_EXE_CC_OPTIONS =
BUILD_EXE_LD_OPTIONS_PRELUDE =
BUILD_EXE_INPUT_FILENAMES = $(EXECUTABLE_OBJECTS)
BUILD_EXE_LD_OPTIONS = $(LIBRARY)

all:

all-pre:

all-post: $(LIBRARY) $(EXECUTABLE)

$(LIBRARY): $(LIBRARY_OBJECTS_IN_COMPILE_ORDER)
	rm -f $(LIBRARY)
	ar rc $(LIBRARY) $(LIBRARY_OBJECTS) && $(RANLIB) $(LIBRARY)

_$(GAMBCGSCLIB).c: $(LIBRARY_MODULES_C) $(rootfromhere)/lib/_gambc.c
	 $(rootfromhere)/gsc-boot -:~~bin=$(srcdirpfx)$(rootfromhere)/bin,~~lib=$(srcdirpfx)$(rootfromhere)/lib,~~include=$(srcdirpfx)$(rootfromhere)/include -f -link -l $(srcdirpfx)$(rootfromhere)/lib/_gambc -o $@ $(LIBRARY_MODULES_C)

$(EXECUTABLE): $(EXECUTABLE_OBJECTS_IN_COMPILE_ORDER) $(LINK_LIBS)
	${C_COMPILER} ${FLAGS_EXE} ${DEFS_EXE} -I"${GAMBCDIR_INCLUDE}"  -o "${BUILD_EXE_OUTPUT_FILENAME}" ${BUILD_EXE_CC_OPTIONS} ${BUILD_EXE_LD_OPTIONS_PRELUDE} ${BUILD_EXE_INPUT_FILENAMES} "${GAMBCDIR_LIB}/libgambc.a" ${LIBS} ${BUILD_EXE_LD_OPTIONS}

_gsc_.c: $(EXECUTABLE_MODULES_C) _$(GAMBCGSCLIB).c
	 $(rootfromhere)/gsc-boot -:~~bin=$(srcdirpfx)$(rootfromhere)/bin,~~lib=$(srcdirpfx)$(rootfromhere)/lib,~~include=$(srcdirpfx)$(rootfromhere)/include -f -link -l _$(GAMBCGSCLIB) -o $@ $(EXECUTABLE_MODULES_C)

_gsc.o: _gsc.c
	${C_COMPILER} ${FLAGS_OBJ} ${DEFS_OBJ} -I"${GAMBCDIR_INCLUDE}" -c -o "${BUILD_OBJ_OUTPUT_FILENAME}" ${BUILD_OBJ_CC_OPTIONS} ${BUILD_OBJ_INPUT_FILENAMES}

_gsc_.o: _gsc_.c
	${C_COMPILER} ${FLAGS_OBJ} ${DEFS_OBJ} -I"${GAMBCDIR_INCLUDE}" -c -o "${BUILD_OBJ_OUTPUT_FILENAME}" ${BUILD_OBJ_CC_OPTIONS} ${BUILD_OBJ_INPUT_FILENAMES}

.c.o:
	${C_COMPILER} ${FLAGS_OBJ} ${DEFS_OBJ} -I"${GAMBCDIR_INCLUDE}" -c -o "${BUILD_OBJ_OUTPUT_FILENAME}" ${BUILD_OBJ_CC_OPTIONS} ${BUILD_OBJ_INPUT_FILENAMES} -D___LIBRARY

.scm.c:
	 $(rootfromhere)/gsc-boot -:~~bin=$(srcdirpfx)$(rootfromhere)/bin,~~lib=$(srcdirpfx)$(rootfromhere)/lib,~~include=$(srcdirpfx)$(rootfromhere)/include -f -c  -check $(srcdirpfx)$*.scm

_gsc.c: $(srcdirpfx)$(rootfromhere)/gsi/main.scm

$(MODULES_C): $(srcdirpfx)$(rootfromhere)/lib/header.scm \
$(srcdirpfx)$(rootfromhere)/lib/gambit\#.scm \
$(srcdirpfx)$(rootfromhere)/lib/_gambit\#.scm \
$(srcdirpfx)_assert\#.scm $(srcdirpfx)_asm\#.scm \
$(srcdirpfx)_x86\#.scm $(srcdirpfx)_codegen\#.scm \
$(srcdirpfx)fixnum.scm $(srcdirpfx)generic.scm

$(MODULES_O): $(srcdirpfx)$(rootfromhere)/include/gambit.h

bootstrap-pre:

bootstrap-post:
	rm -f $(rootfromhere)/gsc-boot $(rootfromhere)/gsc-boot
	cp $(EXECUTABLE) $(rootfromhere)/gsc-boot
	cp $(LIBRARY) $(rootfromhere)/$(LIBRARY)

install-pre:

install-post: all
	c_bindir=$(DESTDIR)$(prefix)/bin; \
	i_bindir=$(DESTDIR)$(bindir); \
	t_bindir=$$i_bindir; \
	c_libdir=$(DESTDIR)$(prefix)/lib; \
	i_libdir=$(DESTDIR)$(libdir); \
	t_libdir=$$i_libdir; \
	$(srcdirpfx)$(rootfromhere)/mkidirs $$i_bindir $$i_libdir; \
	if test "no" = "yes"; then \
	  $(srcdirpfx)$(rootfromhere)/mkidirs $$c_bindir $$c_libdir; \
	  t_bindir=$$c_bindir; \
	  t_libdir=$$c_libdir; \
	fi; \
	:; \
	for file in $(INSTFILES_LIB_DATA); do \
	  $(INSTALL_DATA) $$file $$t_libdir/$$file; \
	done; \
	for file in $(LIBRARIES); do \
	  $(INSTALL_LIB) $$file $$t_libdir/$$file; \
	done; \
	$(RANLIB) $$t_libdir/$(LIBRARY); \
	:; \
	$(INSTALL_PROGRAM) $(EXECUTABLE) $$t_bindir/$(EXECUTABLE_INSTALLED); \
	if test "$$t_libdir" != "$$i_libdir"; then \
	  r_libdir=`$(rootfromhere)/relpath "$$t_libdir" "$$i_libdir" no`; \
	  for file in $(INSTFILES_LIB_DATA) $(LIBRARIES); do \
	    (cd $$i_libdir && $(LN_S) $$r_libdir$$file $$file); \
	  done; \
	fi; \
	if test "$$t_bindir" != "$$i_bindir"; then \
	  r_bindir=`$(rootfromhere)/relpath "$$t_bindir" "$$i_bindir" no`; \
	  for file in $(EXECUTABLE_INSTALLED); do \
	    (cd $$i_bindir && $(LN_S) $$r_bindir$$file $$file); \
	  done; \
	fi

uninstall-pre:

uninstall-post:
	c_bindir=$(DESTDIR)$(prefix)/bin; \
	i_bindir=$(DESTDIR)$(bindir); \
	t_bindir=$$i_bindir; \
	c_libdir=$(DESTDIR)$(prefix)/lib; \
	i_libdir=$(DESTDIR)$(libdir); \
	t_libdir=$$i_libdir; \
	if test "no" = "yes"; then \
	  t_bindir=$$c_bindir; \
	  t_libdir=$$c_libdir; \
	fi; \
	for file in $(INSTFILES_LIB_DATA) $(LIBRARIES); do \
	  rm -f $$t_libdir/$$file; \
	done; \
	if test "$$t_libdir" != "$$i_libdir"; then \
	  for file in $(INSTFILES_LIB_DATA) $(LIBRARIES); do \
	    rm -f $$i_libdir/$$file; \
	  done; \
	fi; \
	rm -f $$t_bindir/$(EXECUTABLE_INSTALLED); \
	if test "$$t_bindir" != "$$i_bindir"; then \
	  for file in $(EXECUTABLE_INSTALLED); do \
	    rm -f $$i_bindir/$$file; \
	  done; \
	fi; \
	rmdir $$t_libdir 2> /dev/null; \
	if test "$$t_libdir" != "$$i_libdir"; then \
	  rmdir $$i_libdir 2> /dev/null; \
	fi; \
	rmdir $$t_bindir 2> /dev/null; \
	if test "$$t_bindir" != "$$i_bindir"; then \
	  rmdir $$i_bindir 2> /dev/null; \
	fi

select-gen-for-commit-pre:

select-gen-for-commit-post:
	$(RC) update-index --no-assume-unchanged $(GENDISTFILES)

deselect-gen-for-commit-pre:

deselect-gen-for-commit-post:
	$(RC) update-index --assume-unchanged $(GENDISTFILES)

mostlyclean-pre:

mostlyclean-post:
	rm -f $(OBJECTS) $(LIBRARY) $(EXECUTABLE)

clean-pre: mostlyclean-pre

clean-post: mostlyclean-post
	rm -f *.da *.bb *.bbg *.gcov *.gcno *.gcda

distclean-pre: clean-pre

distclean-post: clean-post

bootclean-pre: distclean-pre

bootclean-post: distclean-post
	rm -f $(GENDISTFILES)

realclean-pre: bootclean-pre

realclean-post: bootclean-post
	rm -f makefile

rc-setup-pre:
	$(RC) add $(RCFILES) $(GENDISTFILES)

rc-setup-post:

dist-pre dist-devel-pre:
	mkdir $(rootfromhere)/$(PACKAGE_TARNAME)/$(herefromroot)
	chmod 777 $(rootfromhere)/$(PACKAGE_TARNAME)/$(herefromroot)
	@echo "  Copying distribution files:"
	@for file in $(DISTFILES); do \
	  echo "    $(herefromroot)/$$file"; \
	  ln $(srcdirpfx)$$file $(rootfromhere)/$(PACKAGE_TARNAME)/$(herefromroot) 2> /dev/null \
	    || cp -p $(srcdirpfx)$$file $(rootfromhere)/$(PACKAGE_TARNAME)/$(herefromroot); \
	done

dist-post dist-devel-post:

all-recursive bootstrap-recursive install-recursive uninstall-recursive select-gen-for-commit-recursive deselect-gen-for-commit-recursive mostlyclean-recursive clean-recursive distclean-recursive bootclean-recursive realclean-recursive rc-setup-recursive dist-recursive dist-devel-recursive:
	@if test -n "$(SUBDIRS)"; then \
	  for subdir in ""$(SUBDIRS); do \
	    target=`echo $@ | sed 's/-recursive//'`; \
	    echo making $$target in $$subdir; \
	    (cd $$subdir && $(MAKE) $$target) || exit 1; \
	  done \
	fi

all: all-post

all-post: all-recursive

all-recursive: all-pre

bootstrap: bootstrap-post

bootstrap-post: bootstrap-recursive

bootstrap-recursive: bootstrap-pre

install: install-post

install-post: install-recursive

install-recursive: install-pre

uninstall: uninstall-post

uninstall-post: uninstall-recursive

uninstall-recursive: uninstall-pre

select-gen-for-commit: select-gen-for-commit-post

select-gen-for-commit-post: select-gen-for-commit-recursive

select-gen-for-commit-recursive: select-gen-for-commit-pre

deselect-gen-for-commit: deselect-gen-for-commit-post

deselect-gen-for-commit-post: deselect-gen-for-commit-recursive

deselect-gen-for-commit-recursive: deselect-gen-for-commit-pre

mostlyclean: mostlyclean-post

mostlyclean-post: mostlyclean-recursive

mostlyclean-recursive: mostlyclean-pre

clean: clean-post

clean-post: clean-recursive

clean-recursive: clean-pre

distclean: distclean-post

distclean-post: distclean-recursive

distclean-recursive: distclean-pre

bootclean: bootclean-post

bootclean-post: bootclean-recursive

bootclean-recursive: bootclean-pre

realclean: realclean-post

realclean-post: realclean-recursive

realclean-recursive: realclean-pre

rc-setup: rc-setup-post

rc-setup-post: rc-setup-recursive

rc-setup-recursive: rc-setup-pre

dist: dist-post

dist-post: dist-recursive

dist-recursive: dist-pre

dist-devel: dist-devel-post

dist-devel-post: dist-devel-recursive

dist-devel-recursive: dist-devel-pre

makefile: makefile.in $(rootfromhere)/config.status
	cd $(rootfromhere) && CONFIG_FILES=$(herefromroot)/$@ CONFIG_HEADERS= ./config.status

# Tell versions [3.59,3.63) of GNU make not to export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
